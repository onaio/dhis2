#!/usr/bin/env bash
#########################################################
# postgres backup script v1.2
# author: Bob Jolliffe
# licence: public domain 
#
# using some ideas from 
# http://wiki.postgresql.org/wiki/Automated_Backup_on_Linux
#########################################################

BACKUP_DIR=~/backups/
# REMOTE="xxxx@xxxxxx:./dhis"
USER=$LOGNAME
DBNAME=$LOGNAME
# Keep Sunday's backup
DAY_OF_WEEK_TO_KEEP=7
WEEKS_TO_KEEP=6
DAYS_TO_KEEP=7

EXCLUDED="-T aggregated* -T analytics* -T completeness*"

function perform_backups()
{
  SUFFIX=$1
  FINAL_BACKUP_DIR=$BACKUP_DIR/backup"`date +\%Y-\%m-\%d`$SUFFIX/"
  
  if ! mkdir -p $FINAL_BACKUP_DIR; then
        echo "`date` Cannot create backup directory in $FINAL_BACKUP_DIR. Go and fix it!"
        exit 1;
  fi;

  if ! pg_dump -O -Fp $DBNAME $EXCLUDED | gzip > $FINAL_BACKUP_DIR"$DBNAME".sql.gz.in_progress; then
      echo "`date` [!!ERROR!!] Failed to produce plain backup of database $DBNAME"
  else
    mv $FINAL_BACKUP_DIR"$DBNAME".sql.gz.in_progress $FINAL_BACKUP_DIR"$DBNAME".sql.gz
    # sync to remote server
    # rsync -avq $BACKUP_DIR $REMOTE
  fi
}

# MONTHLY BACKUPS
DAY_OF_MONTH=`date +%d`
 
if [ $DAY_OF_MONTH = "01" ];
then
	# Delete all expired monthly directories
	find $BACKUP_DIR -maxdepth 1 -name "*-monthly" -exec rm -rf '{}' ';'
 
	perform_backups "-monthly"
 
	exit 0;
fi
 
# WEEKLY BACKUPS
DAY_OF_WEEK=`date +%u` #1-7 (Monday-Sunday)
EXPIRED_DAYS=`expr $((($WEEKS_TO_KEEP * 7) + 1))`
 
if [ $DAY_OF_WEEK = $DAY_OF_WEEK_TO_KEEP ];
then
	# Delete all expired weekly directories
	find $BACKUP_DIR -maxdepth 1 -mtime +$EXPIRED_DAYS -name "*-weekly" -exec rm -rf '{}' ';'
 
	perform_backups "-weekly"
 
	exit 0;
fi

# Delete daily backups 7 days old or more
find $BACKUP_DIR -maxdepth 1 -mtime +$DAYS_TO_KEEP -name "*-daily" -exec rm -rf '{}' ';'
 
perform_backups "-daily"


